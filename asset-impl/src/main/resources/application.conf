
play.application.loader = com.ktmet.asset.impl.AssetLoader

akka.cluster.sharding.state-store-mode = ddata
akka.actor.enable-additional-serialization-bindings = on


akka.actor.serializers {
  jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
}


akka.actor.serialization-bindings {
  "akka.Done" = akka-misc
  "akka.actor.Address" = akka-misc
  "akka.remote.UniqueAddress" = akka-misc
  "com.ktmet.asset.impl.entity.UserEntity$Command" = jackson-json
  "com.ktmet.asset.impl.entity.UserEntity$Response" = jackson-json
  "com.ktmet.asset.impl.entity.PortfolioEntity$Command" = jackson-json
  "com.ktmet.asset.impl.entity.PortfolioEntity$Response" = jackson-json
  "com.ktmet.asset.impl.actor.NowPriceActor$Command" = jackson-json
  "com.ktmet.asset.impl.actor.NowPriceActor$Response" = jackson-json
  "com.ktmet.asset.impl.actor.StockAutoCompleter$Command" = jackson-json
  "com.ktmet.asset.impl.actor.StockAutoCompleter$Response" = jackson-json
//  "com.ktmet.asset.api.CashRatio" = jackson-json
//  "com.ktmet.asset.api.StockRatio" = jackson-json
//  "com.ktmet.asset.api.GoalAssetRatio" = jackson-json
//  "com.ktmet.asset.api.AssetCategory" = jackson-json
//  "com.ktmet.asset.api.HistorySet" = jackson-json
}


akka.cluster.auto-down-unreachable-after = 120s

akka.cluster.sharding {
  # Number of shards used by the default HashCodeMessageExtractor
  # when no other message extractor is defined. This value must be
  # the same for all nodes in the cluster and that is verified by
  # configuration check when joining. Changing the value requires
  # stopping all nodes in the cluster.
  number-of-shards = 64

}


play {
  server {
    pidfile.path = "/dev/null"
    http.port = 10000
  }
  http.secret.key = "${APPLICATION_SECRET}"
}
play.server.akka.requestTimeout = 7s

play.http.parser.maxMemoryBuffer = 5M


cassandra.default {
  contact-points = ${CASSANDRA_CONTACT_POINT}
  session-provider = akka.persistence.cassandra.ConfigSessionProvider
  keyspace = asset
}

cassandra-journal {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
  keyspace = ${cassandra.default.keyspace}
}

cassandra-snapshot-store {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
  keyspace = ${cassandra.default.keyspace}
}

lagom.persistence.read-side.cassandra {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
  keyspace = ${cassandra.default.keyspace}
}

akka {
  actor {
    provider = "cluster"
  }
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    seed-nodes = [
                  "akka://assetImpl-application@127.0.0.1:2551"  //local
//      "akka://application@127.0.0.1:2551"   //docker

    ]
  }
}


akka {
  discovery.method = config
}

akka.discovery.config.services = {
  Collector = {
    endpoints = [
      {
        host = "172.17.0.1"
        port = 10001
      }
    ]
  }
}

akka.management.http.port = 10002
